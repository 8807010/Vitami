"use strict";function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}!function(e){"function"==typeof define&&define.amd?define("scripts",e):e()}(function(){var r="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:{};function e(e,t){return e(t={exports:{}},t.exports),t.exports}var t,n=e(function(e){var t,n;t=r,n=function(){function b(e,t,n){if(n){var r=document.createDocumentFragment(),o=!t.hasAttribute("viewBox")&&n.getAttribute("viewBox");o&&t.setAttribute("viewBox",o);for(var l=n.cloneNode(!0);l.childNodes.length;)r.appendChild(l.firstChild);e.appendChild(r)}}function m(r){r.onreadystatechange=function(){if(4===r.readyState){var n=r._cachedDocument;n||((n=r._cachedDocument=document.implementation.createHTMLDocument("")).body.innerHTML=r.responseText,r._cachedTarget={}),r._embeds.splice(0).map(function(e){var t=r._cachedTarget[e.id];t=t||(r._cachedTarget[e.id]=n.getElementById(e.id)),b(e.parent,e.svg,t)})}},r.onreadystatechange()}function v(e){for(var t=e;"svg"!==t.nodeName.toLowerCase()&&(t=t.parentNode););return t}return function(e){var u,d=Object(e),t=window.top!==window.self;u="polyfill"in d?d.polyfill:/\bTrident\/[567]\b|\bMSIE (?:9|10)\.0\b/.test(navigator.userAgent)||(navigator.userAgent.match(/\bEdge\/12\.(\d+)\b/)||[])[1]<10547||(navigator.userAgent.match(/\bAppleWebKit\/(\d+)\b/)||[])[1]<537||/\bEdge\/.(\d+)\b/.test(navigator.userAgent)&&t;var f={},p=window.requestAnimationFrame||setTimeout,h=document.getElementsByTagName("use"),g=0;u&&function e(){for(var t=0;t<h.length;){var n=h[t],r=n.parentNode,o=v(r),l=n.getAttribute("xlink:href")||n.getAttribute("href");if(!l&&d.attributeName&&(l=n.getAttribute(d.attributeName)),o&&l){if(u)if(!d.validate||d.validate(l,o,n)){r.removeChild(n);var i=l.split("#"),a=i.shift(),c=i.join("#");if(a.length){var s=f[a];s||((s=f[a]=new XMLHttpRequest).open("GET",a),s.send(),s._embeds=[]),s._embeds.push({parent:r,svg:o,id:c}),m(s)}else b(r,o,document.getElementById(c))}else++t,++g}else++t}(!h.length||0<h.length-g)&&p(e,67)}()}},e.exports?e.exports=n():t.svg4everybody=n()}),o=e(function(e,t){var n;n=function(){return r={},o.m=n=[function(e,t,n){n.r(t);function r(e){return Array.isArray(e)?e:[e]}function c(e){return e instanceof Node}function o(e,t){if(e&&t){e=e instanceof NodeList?e:[e];for(var n=0;n<e.length&&!0!==t(e[n],n,e.length);n++);}}function l(e){return console.error("[scroll-lock] ".concat(e))}function b(e){if(Array.isArray(e))return e.join(", ")}function i(e){var t=[];return o(e,function(e){return t.push(e)}),t}function m(e,t,n,r){var o=3<arguments.length&&void 0!==r?r:document;if((!(2<arguments.length&&void 0!==n)||n)&&-1!==i(o.querySelectorAll(t)).indexOf(e))return e;for(;(e=e.parentElement)&&-1===i(o.querySelectorAll(t)).indexOf(e););return e}function v(e,t,n){var r=2<arguments.length&&void 0!==n?n:document;return-1!==i(r.querySelectorAll(t)).indexOf(e)}function a(e){return e&&"hidden"===getComputedStyle(e).overflow}function y(e){return e&&(!!a(e)||e.scrollTop<=0)}function S(e){if(e){if(a(e))return 1;var t=e.scrollTop;return e.scrollHeight<=t+e.offsetHeight}}function w(e){return e&&(!!a(e)||e.scrollLeft<=0)}function k(e){if(e){if(a(e))return 1;var t=e.scrollLeft;return e.scrollWidth<=t+e.offsetWidth}}function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}n.d(t,"disablePageScroll",function(){return d}),n.d(t,"enablePageScroll",function(){return f}),n.d(t,"getScrollState",function(){return p}),n.d(t,"clearQueueScrollLocks",function(){return h}),n.d(t,"getTargetScrollBarWidth",function(){return g}),n.d(t,"getCurrentTargetScrollBarWidth",function(){return O}),n.d(t,"getPageScrollBarWidth",function(){return M}),n.d(t,"getCurrentPageScrollBarWidth",function(){return L}),n.d(t,"addScrollableTarget",function(){return T}),n.d(t,"removeScrollableTarget",function(){return x}),n.d(t,"addScrollableSelector",function(){return E}),n.d(t,"removeScrollableSelector",function(){return P}),n.d(t,"addLockableTarget",function(){return j}),n.d(t,"addLockableSelector",function(){return q}),n.d(t,"setFillGapMethod",function(){return G}),n.d(t,"addFillGapTarget",function(){return W}),n.d(t,"removeFillGapTarget",function(){return F}),n.d(t,"addFillGapSelector",function(){return N}),n.d(t,"removeFillGapSelector",function(){return Y}),n.d(t,"refillGaps",function(){return B});var u=["padding","margin","width","max-width","none"],A={scroll:!0,queue:0,scrollableSelectors:["[data-scroll-lock-scrollable]"],lockableSelectors:["body","[data-scroll-lock-lockable]"],fillGapSelectors:["body","[data-scroll-lock-fill-gap]","[data-scroll-lock-lockable]"],fillGapMethod:u[0],startTouchY:0,startTouchX:0},d=function(e){A.queue<=0&&(A.scroll=!1,_(),K()),T(e),A.queue++},f=function(e){0<A.queue&&A.queue--,A.queue<=0&&(A.scroll=!0,C(),X()),x(e)},p=function(){return A.scroll},h=function(){A.queue=0},g=function(e,t){var n=1<arguments.length&&void 0!==t&&t;if(c(e)){var r=e.style.overflowY;n?p()||(e.style.overflowY=e.getAttribute("data-scroll-lock-saved-overflow-y-property")):e.style.overflowY="scroll";var o=O(e);return e.style.overflowY=r,o}return 0},O=function(e){if(c(e)){if(e===document.body){var t=document.documentElement.clientWidth;return window.innerWidth-t}var n=e.style.borderLeftWidth,r=e.style.borderRightWidth;e.style.borderLeftWidth="0px",e.style.borderRightWidth="0px";var o=e.offsetWidth-e.clientWidth;return e.style.borderLeftWidth=n,e.style.borderRightWidth=r,o}return 0},M=function(e){var t=0<arguments.length&&void 0!==e&&e;return g(document.body,t)},L=function(){return O(document.body)},T=function(e){e&&r(e).map(function(e){o(e,function(e){c(e)?e.setAttribute("data-scroll-lock-scrollable",""):l('"'.concat(e,'" is not a Element.'))})})},x=function(e){e&&r(e).map(function(e){o(e,function(e){c(e)?e.removeAttribute("data-scroll-lock-scrollable"):l('"'.concat(e,'" is not a Element.'))})})},E=function(e){e&&r(e).map(function(e){A.scrollableSelectors.push(e)})},P=function(e){e&&r(e).map(function(t){A.scrollableSelectors=A.scrollableSelectors.filter(function(e){return e!==t})})},j=function(e){e&&(r(e).map(function(e){o(e,function(e){c(e)?e.setAttribute("data-scroll-lock-lockable",""):l('"'.concat(e,'" is not a Element.'))})}),p()||_())},q=function(e){e&&(r(e).map(function(e){A.lockableSelectors.push(e)}),p()||_(),N(e))},G=function(e){if(e)if(-1!==u.indexOf(e))A.fillGapMethod=e,B();else{var t=u.join(", ");l('"'.concat(e,'" method is not available!\nAvailable fill gap methods: ').concat(t,"."))}},W=function(e){e&&r(e).map(function(e){o(e,function(e){c(e)?(e.setAttribute("data-scroll-lock-fill-gap",""),A.scroll||I(e)):l('"'.concat(e,'" is not a Element.'))})})},F=function(e){e&&r(e).map(function(e){o(e,function(e){c(e)?(e.removeAttribute("data-scroll-lock-fill-gap"),A.scroll||J(e)):l('"'.concat(e,'" is not a Element.'))})})},N=function(e){e&&r(e).map(function(e){-1===A.fillGapSelectors.indexOf(e)&&(A.fillGapSelectors.push(e),A.scroll||Q(e))})},Y=function(e){e&&r(e).map(function(t){A.fillGapSelectors=A.fillGapSelectors.filter(function(e){return e!==t}),A.scroll||z(t)})},B=function(){A.scroll||K()},_=function(){var e=b(A.lockableSelectors);D(e)},C=function(){var e=b(A.lockableSelectors);R(e)},D=function(e){var t=document.querySelectorAll(e);o(t,function(e){H(e)})},R=function(e){var t=document.querySelectorAll(e);o(t,function(e){U(e)})},H=function(e){if(c(e)&&"true"!==e.getAttribute("data-scroll-lock-locked")){var t=window.getComputedStyle(e);e.setAttribute("data-scroll-lock-saved-overflow-y-property",t.overflowY),e.setAttribute("data-scroll-lock-saved-inline-overflow-property",e.style.overflow),e.setAttribute("data-scroll-lock-saved-inline-overflow-y-property",e.style.overflowY),e.style.overflow="hidden",e.setAttribute("data-scroll-lock-locked","true")}},U=function(e){c(e)&&"true"===e.getAttribute("data-scroll-lock-locked")&&(e.style.overflow=e.getAttribute("data-scroll-lock-saved-inline-overflow-property"),e.style.overflowY=e.getAttribute("data-scroll-lock-saved-inline-overflow-y-property"),e.removeAttribute("data-scroll-lock-saved-overflow-property"),e.removeAttribute("data-scroll-lock-saved-inline-overflow-property"),e.removeAttribute("data-scroll-lock-saved-inline-overflow-y-property"),e.removeAttribute("data-scroll-lock-locked"))},K=function(){A.fillGapSelectors.map(function(e){Q(e)})},X=function(){A.fillGapSelectors.map(function(e){z(e)})},Q=function(e){var t=document.querySelectorAll(e),n=-1!==A.lockableSelectors.indexOf(e);o(t,function(e){I(e,n)})},I=function(e,t){var n=1<arguments.length&&void 0!==t&&t;if(c(e)){var r;if(""===e.getAttribute("data-scroll-lock-lockable")||n)r=g(e,!0);else{var o=m(e,b(A.lockableSelectors));r=g(o,!0)}"true"===e.getAttribute("data-scroll-lock-filled-gap")&&J(e);var l=window.getComputedStyle(e);if(e.setAttribute("data-scroll-lock-filled-gap","true"),e.setAttribute("data-scroll-lock-current-fill-gap-method",A.fillGapMethod),"margin"===A.fillGapMethod){var i=parseFloat(l.marginRight);e.style.marginRight="".concat(i+r,"px")}else if("width"===A.fillGapMethod)e.style.width="calc(100% - ".concat(r,"px)");else if("max-width"===A.fillGapMethod)e.style.maxWidth="calc(100% - ".concat(r,"px)");else if("padding"===A.fillGapMethod){var a=parseFloat(l.paddingRight);e.style.paddingRight="".concat(a+r,"px")}}},z=function(e){var t=document.querySelectorAll(e);o(t,function(e){J(e)})},J=function(e){if(c(e)&&"true"===e.getAttribute("data-scroll-lock-filled-gap")){var t=e.getAttribute("data-scroll-lock-current-fill-gap-method");e.removeAttribute("data-scroll-lock-filled-gap"),e.removeAttribute("data-scroll-lock-current-fill-gap-method"),"margin"===t?e.style.marginRight="":"width"===t?e.style.width="":"max-width"===t?e.style.maxWidth="":"padding"===t&&(e.style.paddingRight="")}};"undefined"!=typeof window&&window.addEventListener("resize",function(){B()}),"undefined"!=typeof document&&(document.addEventListener("touchstart",function(e){A.scroll||(A.startTouchY=e.touches[0].clientY,A.startTouchX=e.touches[0].clientX)}),document.addEventListener("touchmove",function(i){if(!A.scroll){var e=A.startTouchY,t=A.startTouchX,n=i.touches[0].clientY,r=i.touches[0].clientX;if(i.touches.length<2){var a=b(A.scrollableSelectors),c=e<n,s=n<e,u=t<r,d=r<t,f=e+3<n,p=n<e-3,h=t+3<r,g=r<t-3;!function e(t,n){var r=1<arguments.length&&void 0!==n&&n;if(t){var o=m(t,a,!1);if(v(t,'input[type="range"]'))return!1;if(r||v(t,'textarea, [contenteditable="true"]')&&m(t,a)||v(t,a)){var l=!1;w(t)&&k(t)?(c&&y(t)||s&&S(t))&&(l=!0):y(t)&&S(t)?(u&&w(t)||d&&k(t))&&(l=!0):(f&&y(t)||p&&S(t)||h&&w(t)||g&&k(t))&&(l=!0),l&&(o?e(o,!0):i.preventDefault())}else e(o)}else i.preventDefault()}(i.target)}}},{passive:!1}),document.addEventListener("touchend",function(){A.scroll||(A.startTouchY=0,A.startTouchX=0)}));var V={hide:function(e){l('"hide" is deprecated! Use "disablePageScroll" instead. \n https://github.com/FL3NKEY/scroll-lock#disablepagescrollscrollabletarget'),d(e)},show:function(e){l('"show" is deprecated! Use "enablePageScroll" instead. \n https://github.com/FL3NKEY/scroll-lock#enablepagescrollscrollabletarget'),f(e)},toggle:function(e){l('"toggle" is deprecated! Do not use it.'),p()?d():f(e)},getState:function(){return l('"getState" is deprecated! Use "getScrollState" instead. \n https://github.com/FL3NKEY/scroll-lock#getscrollstate'),p()},getWidth:function(){return l('"getWidth" is deprecated! Use "getPageScrollBarWidth" instead. \n https://github.com/FL3NKEY/scroll-lock#getpagescrollbarwidth'),M()},getCurrentWidth:function(){return l('"getCurrentWidth" is deprecated! Use "getCurrentPageScrollBarWidth" instead. \n https://github.com/FL3NKEY/scroll-lock#getcurrentpagescrollbarwidth'),L()},setScrollableTargets:function(e){l('"setScrollableTargets" is deprecated! Use "addScrollableTarget" instead. \n https://github.com/FL3NKEY/scroll-lock#addscrollabletargetscrollabletarget'),T(e)},setFillGapSelectors:function(e){l('"setFillGapSelectors" is deprecated! Use "addFillGapSelector" instead. \n https://github.com/FL3NKEY/scroll-lock#addfillgapselectorfillgapselector'),N(e)},setFillGapTargets:function(e){l('"setFillGapTargets" is deprecated! Use "addFillGapTarget" instead. \n https://github.com/FL3NKEY/scroll-lock#addfillgaptargetfillgaptarget'),W(e)},clearQueue:function(){l('"clearQueue" is deprecated! Use "clearQueueScrollLocks" instead. \n https://github.com/FL3NKEY/scroll-lock#clearqueuescrolllocks'),h()}},Z=function(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter(function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),r.forEach(function(e){s(t,e,n[e])})}return t}({disablePageScroll:d,enablePageScroll:f,getScrollState:p,clearQueueScrollLocks:h,getTargetScrollBarWidth:g,getCurrentTargetScrollBarWidth:O,getPageScrollBarWidth:M,getCurrentPageScrollBarWidth:L,addScrollableSelector:E,removeScrollableSelector:P,addScrollableTarget:T,removeScrollableTarget:x,addLockableSelector:q,addLockableTarget:j,addFillGapSelector:N,removeFillGapSelector:Y,addFillGapTarget:W,removeFillGapTarget:F,setFillGapMethod:G,refillGaps:B,_state:A},V);t.default=Z}],o.c=r,o.d=function(e,t,n){o.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},o.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},o.t=function(t,e){if(1&e&&(t=o(t)),8&e)return t;if(4&e&&"object"===_typeof(t)&&t&&t.__esModule)return t;var n=Object.create(null);if(o.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var r in t)o.d(n,r,function(e){return t[e]}.bind(null,r));return n},o.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return o.d(t,"a",t),t},o.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},o.p="",o(o.s=0).default;function o(e){if(r[e])return r[e].exports;var t=r[e]={i:e,l:!1,exports:{}};return n[e].call(t.exports,t,t.exports,o),t.l=!0,t.exports}var n,r},e.exports=n()}),l=(t=o)&&t.__esModule&&Object.prototype.hasOwnProperty.call(t,"default")?t.default:t;function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function a(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function c(e,t,n){return t&&a(e.prototype,t),n&&a(e,n),e}function s(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter(function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable})),n.push.apply(n,r)}return n}function u(o){for(var e=1;e<arguments.length;e++){var l=null!=arguments[e]?arguments[e]:{};e%2?s(Object(l),!0).forEach(function(e){var t,n,r;t=o,r=l[n=e],n in t?Object.defineProperty(t,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[n]=r}):Object.getOwnPropertyDescriptors?Object.defineProperties(o,Object.getOwnPropertyDescriptors(l)):s(Object(l)).forEach(function(e){Object.defineProperty(o,e,Object.getOwnPropertyDescriptor(l,e))})}return o}var d=function(){function n(e){var t=this;i(this,n),this.container=document.querySelector(e),this.schem={mainMenu:"[data-main-bar]",mainMenuNav:"[data-main-nav]",mainToggle:"[data-main-toggle]",subitems:"[data-main-subitem]",subitemToggle:"[data-subitem-toggle]",subitemList:"[data-subitem-list]"},this.mainSubitems=[],this.mainToggles=[],this.mainMenu=null,this.mainMenuNav=null,this.state={menuOpen:!1,isSublistExpanded:!1,expandedSublist:null,isHidden:!1,width:window.innerWidth},this.scrollDistance=0,this.classes={menuOpen:"is-open",pageScroll:"is-scroll",submenuOpen:"is-expanded",hidden:"is-invisible"},this.container&&(this.initMobileMenu(),this.initScrollListener(),document.addEventListener("keydown",function(e){"Escape"===e.key&&t.closeMenu()}))}return c(n,[{key:"initMobileMenu",value:function(){var t=this;this.mainMenu=this.container.querySelector(this.schem.mainMenu),this.mainMenuNav=this.container.querySelector(this.schem.mainMenuNav),this.mainToggles=Array.prototype.slice.call(this.container.querySelectorAll(this.schem.mainToggle)),this.mainToggles.forEach(function(e){console.log("ssss"),e.addEventListener("click",function(){console.log("clic"),!1===t.state.menuOpen?(console.log("op"),t.openMenu()):(console.log("hi"),t.closeMenu())})}),window.addEventListener("resize",function(){window.innerWidth!==t.state.width&&t.state.menuOpen&&t.closeMenu(),t.state.width=window.innerWidth})}},{key:"initScrollListener",value:function(){var t=this;window.addEventListener("scroll",function(){var e=window.pageYOffset>t.scrollDistance;t.mainMenu.classList.toggle(t.classes.pageScroll,e)})}},{key:"initSubMenu",value:function(){var n=this;Array.prototype.slice.call(this.container.querySelectorAll(this.schem.subitems)).forEach(function(e){n.mainSubitems.push({container:e,menu:e.querySelector(n.schem.subitemList),toggle:e.querySelector(n.schem.subitemToggle)})}),this.mainSubitems.forEach(function(t){t.toggle.addEventListener("click",function(e){n.expandSubMenu(t)})}),document.addEventListener("click",function(e){n.state.expandedSublist&&e.target!==n.state.expandedSublist.container&&!n.state.expandedSublist.container.contains(e.target)&&n.collapseSubMenu()})}},{key:"getHeight",value:function(){return this.mainMenu?this.mainMenu.offsetHeight:0}},{key:"toggleHidden",value:function(e){this.state.isHidden=e,this.mainMenu.classList.toggle(this.classes.hidden,this.state.isHidden)}},{key:"expandSubMenu",value:function(e){this.state.expandedSublist&&this.state.expandedSublist.menu.classList.remove(this.classes.submenuOpen),e.menu.classList.add(this.classes.submenuOpen),this.state.expandedSublist=u({},e)}},{key:"collapseSubMenu",value:function(){this.state.expandedSublist&&(this.state.expandedSublist.menu.classList.remove(this.classes.submenuOpen),this.state.expandedSublist=null)}},{key:"closeMenu",value:function(){this.state.menuOpen=!1,this.mainMenu.classList.remove(this.classes.menuOpen),this.mainMenuNav.classList.remove(this.classes.menuOpen),this.collapseSubMenu(),app.scroll.enable(this.mainMenuNav)}},{key:"openMenu",value:function(){this.state.menuOpen=!0,this.mainMenu.classList.add(this.classes.menuOpen),this.mainMenuNav.classList.add(this.classes.menuOpen),app.scroll.disable(this.mainMenuNav)}}]),n}(),f=function(){function n(e){var t=this;i(this,n),this.container=e,this.triggerBtn=this.container.querySelector("[data-test-api]"),this.requestResult=this.container.querySelector("[data-test-result]"),this.requestUrl=this.triggerBtn.dataset.testApi,this.triggerBtn.addEventListener("click",function(e){t.requestResponse()})}return c(n,[{key:"requestResponse",value:function(){var t=this;fetch(this.requestUrl).then(function(e){return e.json()}).then(function(e){e&&(t.requestResult.innerHTML=e.title+e.message)})}}]),n}();n(),window.app={header:null,scroll:{disable:l.disablePageScroll,enable:l.enablePageScroll},mobileBreakpoint:47.999375,mobileQuery:window.matchMedia("(max-width: ".concat(47.999375,"rem)")),setInert:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];t.forEach(function(e){e.setAttribute("inert",!0)})},removeInert:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];t.forEach(function(e){e.removeAttribute("inert")})},initModule:function(t,e){e?Array.prototype.slice.call(document.querySelectorAll(e)).forEach(function(e){new t(e)}):new t},init:function(){window.app.header=new d(".js-header"),app.initModule(f,".js-test-api")}},window.addEventListener("DOMContentLoaded",app.init)});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
